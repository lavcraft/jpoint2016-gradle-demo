apply plugin: 'java-gradle-plugin'
apply plugin: 'idea'

repositories {
  jcenter()
}

sourceSets {
  functionalTest {
    groovy.srcDir file('src/functTest/groovy')
    resources.srcDir file('src/functTest/resources')
    compileClasspath += sourceSets.main.output + configurations.testRuntime
    runtimeClasspath += output + compileClasspath
  }
}

task createClasspathManifest {
  def outputDir = sourceSets.functionalTest.output.resourcesDir

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

compileFunctionalTestJava.dependsOn createClasspathManifest

task functionalTest(type: Test) {
  description = 'Runs the functional tests.'
  group = 'verification'
  testClassesDir = sourceSets.functionalTest.output.classesDir
  classpath = sourceSets.functionalTest.runtimeClasspath
  mustRunAfter test

  reports {
    html.destination = project.file("$html.destination/functional")
    junitXml.destination = project.file("$junitXml.destination/functional")
  }
}

idea.module {
  sourceSets.functionalTest.allSource.srcDirs.each {
    testSourceDirs += it
  }

  scopes.TEST.plus += [configurations.functionalTestCompile]
  scopes.TEST.plus += [configurations.functionalTestRuntime]
}

dependencies {
  functionalTestCompile gradleTestKit()
  functionalTestCompile files(createClasspathManifest)
  testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
    exclude module: 'groovy-all'
  }
  testCompile 'com.netflix.nebula:nebula-test:4.0.0'
  compile 'org.asciidoctor:asciidoctorj:1.5.4'
  compile 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.3'
}